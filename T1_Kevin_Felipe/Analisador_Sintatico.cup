import java_cup.runtime.*;

parser code {:
    public void syntax_error(java_cup.runtime.Symbol currToken) {
        System.out.println("You're crazy, it's so easy: " + "Linha: " + (currToken.left+1) + " Coluna: " + (currToken.right+1));
    }
:}


/* terminais. */
terminal            VIRGULA, FECHA_COMANDO, ABRE_COLCHETE, FECHA_COLCHETE, ABRE_PARENTESES, FECHA_PARENTESES, ABRE_BLOCO, FECHA_BLOCO;
terminal            MAIS, MENOS, MULTIPLICACAO, DIVISAO, MAIOR_QUE, MENOR_QUE, RESTO;
terminal            ATRIBUICAO, EQUIVALENCIA, E, OU, OU_EXCLUSIVO, NEGACAO;
terminal            INTEIRO_RESERVADO, BOOLEANO_RESERVADO, CARACTER_RESERVADO, DECIMAL_RESERVADO;
terminal            SE, SE_NAO, ENQUANTO, PARA, ESCREVA, GUARDA;
terminal            DECIMAL ,BOOLEANO , INTEIRO, CARACTER, STRING;//string Ã© apenas usado no print
terminal            IDENTIFICADOR;
terminal            CONTINUAR, PARAR, RETORNAR;

/* Non terminals */
non terminal           unidade_de_compilacao;
non terminal           especificador_tipo;
non terminal           declaracao, expressao, expressao_atribuicao;
non terminal           operador_atribuicao, constante;
non terminal           expressao_condicional, expressao_primaria;
non terminal           expressao_ou, expressao_e, expressao_ou_exclusivo,expressao_equalidade,expressao_relacional;
non terminal           expressao_aditiva,expressao_multiplicativa;
non terminal           instrucao, bloco_instrucao, instrucao_se, instrucao_iterativa, instrucao_pulo, instrucao_composta;
non terminal           comando, comando_escreva, comando_guarda;

/* Precedences */
precedence left OU_EXCLUSIVO;
precedence left E, MAIS, MENOS;
precedence left OU, MULTIPLICACAO, DIVISAO;
precedence nonassoc NEGACAO, MENOR_QUE, MAIOR_QUE, EQUIVALENCIA;

/* Regras */

unidade_de_compilacao ::= declaracao unidade_de_compilacao
                        | instrucao unidade_de_compilacao
                        | instrucao_composta unidade_de_compilacao
                        |
                        ;

especificador_tipo ::= INTEIRO_RESERVADO
                       | DECIMAL_RESERVADO
                       | CARACTER_RESERVADO
                       | BOOLEANO_RESERVADO
                       ;

declaracao ::= especificador_tipo IDENTIFICADOR FECHA_COMANDO 
{: System.out.println("Variavel declarada\n"); :}
    	       | especificador_tipo IDENTIFICADOR ABRE_COLCHETE INTEIRO FECHA_COLCHETE FECHA_COMANDO 
               {: System.out.println("Variavel declarada\n"); :}
               ;

expressao ::= expressao_atribuicao 
		      | expressao VIRGULA expressao_atribuicao 
              ;

expressao_atribuicao ::= expressao_condicional FECHA_COMANDO
                         | IDENTIFICADOR operador_atribuicao expressao_atribuicao 
                         {: System.out.println("Atribuicao feita a um identificador\n "); :}
                         ;

operador_atribuicao ::= ATRIBUICAO
                      ;

constante ::=   CARACTER 
              | INTEIRO 
              | DECIMAL 
              | BOOLEANO
              ;
                
expressao_condicional ::= expressao_ou ;

expressao_ou ::= expressao_e
				 | expressao_ou OU expressao_e {: System.out.println("Expressao logica OU encontrada \n "); :}
                 ;

expressao_e ::= expressao_ou_exclusivo
			      | expressao_e E expressao_ou_exclusivo {: System.out.println("Expressao logica E encontrada \n "); :}
                  ;

expressao_ou_exclusivo ::= expressao_equalidade
				  | expressao_ou_exclusivo OU_EXCLUSIVO expressao_equalidade 
                  {: System.out.println("Expressao logica OU_EXCLUSIVO encontrada \n "); :}
                  ;

expressao_equalidade ::= expressao_relacional
                         | expressao_equalidade EQUIVALENCIA expressao_relacional  
                         {: System.out.println("Expressao relacional '==' encontrada \n "); :}
                         | expressao_equalidade NEGACAO ATRIBUICAO expressao_relacional 
                         {: System.out.println("Expressao relacional '!=' encontrada \n "); :}
                         ;

expressao_relacional ::= expressao_aditiva
                         | expressao_relacional MENOR_QUE expressao_aditiva 
                         {: System.out.println("Expressao relacional '<' encontrada \n "); :}
                         | expressao_relacional MAIOR_QUE expressao_aditiva 
                         {: System.out.println("Expressao relacional '>' encontrada \n "); :}
                         | expressao_relacional MENOR_QUE ATRIBUICAO expressao_aditiva 
                         {: System.out.println("Expressao relacional '<=' encontrada \n "); :}
                         | expressao_relacional MAIOR_QUE ATRIBUICAO expressao_aditiva 
                         {: System.out.println("Expressao relacional '>=' encontrada \n "); :}
                         ;

expressao_aditiva ::= expressao_multiplicativa
                      | expressao_aditiva MAIS expressao_multiplicativa 
                      {: System.out.println("Expressao aritmetica de ADICAO encontrada \n "); :}
                      | expressao_aditiva MENOS expressao_multiplicativa 
                      {: System.out.println("Expressao aritmetica de SUBTRACAO encontrada \n "); :}
                      ;

expressao_multiplicativa ::= expressao_primaria
                             | expressao_multiplicativa MULTIPLICACAO expressao_primaria 
                             {: System.out.println("Expressao aritmetica de MULTIPLICACAO encontrada \n "); :}
                             | expressao_multiplicativa DIVISAO expressao_primaria 
                             {: System.out.println("Expressao aritmetica de  DIVISAO encontrada \n "); :}
                             | expressao_multiplicativa RESTO expressao_primaria 
                             {: System.out.println("Expressao aritmetica de RESTO encontrada \n "); :}
                             ;

expressao_primaria ::= IDENTIFICADOR

                       | constante
                       ;
/*adaptado de "instrucao_composta ::= { declaracao* instrucao* }" verificar equivalencia dps */
instrucao_composta ::= ABRE_BLOCO bloco_instrucao FECHA_BLOCO
                     ;

bloco_instrucao ::= /* empty */
                  | declaracao bloco_instrucao
                  | instrucao bloco_instrucao
                  ;

instrucao ::= expressao
              | instrucao_se
              | instrucao_iterativa
              | instrucao_pulo
		      | comando
              ;

instrucao_se ::= SE ABRE_PARENTESES expressao_condicional FECHA_PARENTESES instrucao_composta 
{: System.out.println("Fim da Instrucao SE\n "); :}
               | SE ABRE_PARENTESES expressao_condicional FECHA_PARENTESES instrucao_composta SE_NAO instrucao_composta 
               {: System.out.println("Fim da Instrucao SE SE_NAO\n "); :}
               ;

/*aqui o for aparece 4x porque o expressao condicional e expressao sao opcionais*/
instrucao_iterativa ::= ENQUANTO ABRE_PARENTESES expressao_condicional FECHA_PARENTESES instrucao_composta 
{: System.out.println("Fim do Comando ENQUANTO\n "); :}
                    | PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO expressao FECHA_PARENTESES instrucao_composta 
                    {: System.out.println("Fim do Comando PARA\n "); :}
                    | PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO FECHA_PARENTESES instrucao_composta 
                    {: System.out.println("Fim do Comando PARA\n "); :}
                    | PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO expressao FECHA_PARENTESES instrucao_composta 
                    {: System.out.println("Fim do Comando PARA\n "); :}
                    | PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO FECHA_PARENTESES instrucao_composta 
                    {: System.out.println("Fim do Comando PARA \n "); :}
                    ;
                        
instrucao_pulo ::=   CONTINUAR FECHA_COMANDO
                   | PARAR FECHA_COMANDO
                   | RETORNAR expressao FECHA_COMANDO
                   ;

comando ::= comando_escreva | comando_guarda ;

comando_escreva ::= ESCREVA ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES FECHA_COMANDO
{: System.out.println("Comando ESCREVA encontrado\n "); :}
			      | ESCREVA ABRE_PARENTESES STRING FECHA_PARENTESES FECHA_COMANDO
                  {: System.out.println("Comando ESCREVA encontrado\n "); :}
                  ;

comando_guarda ::= GUARDA ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES FECHA_COMANDO 
{: System.out.println("Comando GUARDA encontrado\n "); :};