
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\004\010\000\002\005\003\000\002" +
    "\005\005\000\002\006\004\000\002\006\005\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\013\003\000" +
    "\002\013\005\000\002\014\003\000\002\014\005\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\016\006\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\006\000\002\017\006\000" +
    "\002\020\003\000\002\020\005\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\012\003\000\002\012\003\000\002\027\005" +
    "\000\002\023\002\000\002\023\004\000\002\023\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\024\007\000\002\024" +
    "\011\000\002\025\007\000\002\025\013\000\002\025\012" +
    "\000\002\025\012\000\002\025\011\000\002\026\004\000" +
    "\002\026\004\000\002\026\005\000\002\030\003\000\002" +
    "\030\003\000\002\031\007\000\002\031\007\000\002\032" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\050\002\ufffd\012\031\031\020\032\014\033" +
    "\006\034\030\035\015\037\032\040\050\041\036\042\042" +
    "\043\026\044\047\045\044\046\023\050\022\051\024\052" +
    "\017\053\051\001\002\000\004\002\211\001\002\000\036" +
    "\005\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\001\002\000\004\050\ufffa\001\002\000\050\002" +
    "\ufffd\012\031\031\020\032\014\033\006\034\030\035\015" +
    "\037\032\040\050\041\036\042\042\043\026\044\047\045" +
    "\044\046\023\050\022\051\024\052\017\053\051\001\002" +
    "\000\052\002\uffcf\012\uffcf\013\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\036\005\uffde\011\uffde\014\uffde" +
    "\015\uffde\016\124\017\122\020\uffde\021\uffde\022\123\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\001\002\000\052" +
    "\002\uffce\012\uffce\013\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\001\002\000\020\005\uffe8\011\uffe8\024\111\025\uffe8" +
    "\026\uffe8\027\uffe8\030\110\001\002\000\004\050\ufff9\001" +
    "\002\000\004\010\202\001\002\000\050\002\ufffd\012\031" +
    "\031\020\032\014\033\006\034\030\035\015\037\032\040" +
    "\050\041\036\042\042\043\026\044\047\045\044\046\023" +
    "\050\022\051\024\052\017\053\051\001\002\000\004\005" +
    "\200\001\002\000\004\050\ufffc\001\002\000\024\005\uffe6" +
    "\011\uffe6\020\113\021\114\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\001\002\000\036\005\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\176\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\001\002\000\036" +
    "\005\ufff1\011\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\001\002\000\004\005\174\001\002\000\004\050" +
    "\166\001\002\000\036\005\uffef\011\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\001\002\000\030\005\uffe3" +
    "\011\uffe3\014\117\015\120\020\uffe3\021\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002\000\004\050\ufffb" +
    "\001\002\000\046\013\uffd4\031\020\032\014\033\006\034" +
    "\030\035\015\037\032\040\050\041\036\042\042\043\026" +
    "\044\047\045\044\046\023\050\022\051\024\052\017\053" +
    "\051\001\002\000\004\010\154\001\002\000\050\002\ufffd" +
    "\012\031\031\020\032\014\033\006\034\030\035\015\037" +
    "\032\040\050\041\036\042\042\043\026\044\047\045\044" +
    "\046\023\050\022\051\024\052\017\053\051\001\002\000" +
    "\052\002\uffc1\012\uffc1\013\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\001\002\000\014\005\uffea\011\uffea\025\uffea\026" +
    "\uffea\027\106\001\002\000\004\010\144\001\002\000\060" +
    "\002\ufff6\004\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000\004\005\143" +
    "\001\002\000\052\002\uffd0\012\uffd0\013\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\001\002\000\004\010\137\001\002" +
    "\000\012\005\uffec\011\uffec\025\104\026\uffec\001\002\000" +
    "\036\005\ufff0\011\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\001\002\000\010\005\uffed\011\uffed\026\102" +
    "\001\002\000\052\002\uffc2\012\uffc2\013\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\001\002\000\036\005\uffee\011\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\001\002" +
    "\000\004\010\061\001\002\000\014\043\026\044\047\045" +
    "\044\046\023\050\022\001\002\000\036\005\uffd6\011\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\001\002" +
    "\000\054\002\uffd1\004\055\012\uffd1\013\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\001\002\000\052\002\uffcd\012\uffcd" +
    "\013\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002\000" +
    "\014\043\026\044\047\045\044\046\023\050\022\001\002" +
    "\000\060\002\ufff5\004\ufff5\005\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002\000\006" +
    "\004\055\005\060\001\002\000\052\002\uffc3\012\uffc3\013" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\014" +
    "\043\026\044\047\045\044\046\023\050\022\001\002\000" +
    "\004\005\063\001\002\000\016\005\064\043\026\044\047" +
    "\045\044\046\023\050\066\001\002\000\016\011\075\043" +
    "\026\044\047\045\044\046\023\050\022\001\002\000\004" +
    "\005\067\001\002\000\036\005\uffd7\011\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\001\002\000\016\011" +
    "\070\043\026\044\047\045\044\046\023\050\022\001\002" +
    "\000\004\012\031\001\002\000\006\004\055\011\072\001" +
    "\002\000\004\012\031\001\002\000\052\002\uffc9\012\uffc9" +
    "\013\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002\000" +
    "\052\002\uffc8\012\uffc8\013\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\001\002\000\004\012\031\001\002\000\006\004" +
    "\055\011\077\001\002\000\004\012\031\001\002\000\052" +
    "\002\uffc7\012\uffc7\013\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\001\002\000\052\002\uffc6\012\uffc6\013\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\001\002\000\014\043\026\044" +
    "\047\045\044\046\023\050\066\001\002\000\012\005\uffeb" +
    "\011\uffeb\025\104\026\uffeb\001\002\000\014\043\026\044" +
    "\047\045\044\046\023\050\066\001\002\000\014\005\uffe9" +
    "\011\uffe9\025\uffe9\026\uffe9\027\106\001\002\000\014\043" +
    "\026\044\047\045\044\046\023\050\066\001\002\000\020" +
    "\005\uffe7\011\uffe7\024\111\025\uffe7\026\uffe7\027\uffe7\030" +
    "\110\001\002\000\004\023\135\001\002\000\014\043\026" +
    "\044\047\045\044\046\023\050\066\001\002\000\024\005" +
    "\uffe5\011\uffe5\020\113\021\114\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\001\002\000\016\023\132\043\026\044" +
    "\047\045\044\046\023\050\066\001\002\000\016\023\115" +
    "\043\026\044\047\045\044\046\023\050\066\001\002\000" +
    "\014\043\026\044\047\045\044\046\023\050\066\001\002" +
    "\000\030\005\uffe2\011\uffe2\014\117\015\120\020\uffe2\021" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\001\002" +
    "\000\014\043\026\044\047\045\044\046\023\050\066\001" +
    "\002\000\014\043\026\044\047\045\044\046\023\050\066" +
    "\001\002\000\036\005\uffdc\011\uffdc\014\uffdc\015\uffdc\016" +
    "\124\017\122\020\uffdc\021\uffdc\022\123\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\001\002\000\014\043\026\044" +
    "\047\045\044\046\023\050\066\001\002\000\014\043\026" +
    "\044\047\045\044\046\023\050\066\001\002\000\014\043" +
    "\026\044\047\045\044\046\023\050\066\001\002\000\036" +
    "\005\uffda\011\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\001\002\000\036\005\uffd8\011\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\001\002\000\036\005" +
    "\uffd9\011\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\001\002\000\036\005\uffdd\011\uffdd\014\uffdd\015\uffdd" +
    "\016\124\017\122\020\uffdd\021\uffdd\022\123\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002\000\030\005\uffe0" +
    "\011\uffe0\014\117\015\120\020\uffe0\021\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\001\002\000\014\043\026" +
    "\044\047\045\044\046\023\050\066\001\002\000\030\005" +
    "\uffe1\011\uffe1\014\117\015\120\020\uffe1\021\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\001\002\000\030\005" +
    "\uffdf\011\uffdf\014\117\015\120\020\uffdf\021\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000\014\043" +
    "\026\044\047\045\044\046\023\050\066\001\002\000\024" +
    "\005\uffe4\011\uffe4\020\113\021\114\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\001\002\000\004\050\140\001\002" +
    "\000\004\011\141\001\002\000\004\005\142\001\002\000" +
    "\052\002\uffbe\012\uffbe\013\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\001\002\000\060\002\ufff4\004\ufff4\005\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\001\002\000\006\047\145\050\146\001\002\000\004\011" +
    "\151\001\002\000\004\011\147\001\002\000\004\005\150" +
    "\001\002\000\052\002\uffc0\012\uffc0\013\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\001\002\000\004\005\152\001\002" +
    "\000\052\002\uffbf\012\uffbf\013\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\001\002\000\004\002\ufffe\001\002\000\014" +
    "\043\026\044\047\045\044\046\023\050\066\001\002\000" +
    "\004\011\156\001\002\000\004\012\031\001\002\000\052" +
    "\002\uffca\012\uffca\013\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\001\002\000\046\013\uffd4\031\020\032\014\033\006" +
    "\034\030\035\015\037\032\040\050\041\036\042\042\043" +
    "\026\044\047\045\044\046\023\050\022\051\024\052\017" +
    "\053\051\001\002\000\004\013\164\001\002\000\046\013" +
    "\uffd4\031\020\032\014\033\006\034\030\035\015\037\032" +
    "\040\050\041\036\042\042\043\026\044\047\045\044\046" +
    "\023\050\022\051\024\052\017\053\051\001\002\000\004" +
    "\013\uffd3\001\002\000\054\002\uffd5\012\uffd5\013\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000\004" +
    "\013\uffd2\001\002\000\006\005\167\006\170\001\002\000" +
    "\052\002\ufff8\012\ufff8\013\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\001\002\000\004\045\171\001\002\000\004\007" +
    "\172\001\002\000\004\005\173\001\002\000\052\002\ufff7" +
    "\012\ufff7\013\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\001" +
    "\002\000\052\002\uffc5\012\uffc5\013\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\014\043\026\044\047\045" +
    "\044\046\023\050\022\001\002\000\014\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\050\ufff2\001\002\000\060\002\ufff3\004" +
    "\ufff3\005\ufff3\011\ufff3\012\ufff3\013\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\001\002\000\052\002\uffc4\012\uffc4\013" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002\000\004" +
    "\002\001\001\002\000\014\043\026\044\047\045\044\046" +
    "\023\050\066\001\002\000\004\011\204\001\002\000\004" +
    "\012\031\001\002\000\054\002\uffcc\012\uffcc\013\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\206\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000\004" +
    "\012\031\001\002\000\052\002\uffcb\012\uffcb\013\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\060\002\003\003\024\004\015\005\052\006" +
    "\036\010\051\011\037\012\004\013\044\014\042\015\034" +
    "\016\012\017\020\020\026\021\010\022\006\024\040\025" +
    "\007\026\011\027\032\030\053\031\045\032\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\207\003\024\004\015\005\052\006\036\010\051" +
    "\011\037\012\004\013\044\014\042\015\034\016\012\017" +
    "\020\020\026\021\010\022\006\024\040\025\007\026\011" +
    "\027\032\030\053\031\045\032\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\002\200\003" +
    "\024\004\015\005\052\006\036\010\051\011\037\012\004" +
    "\013\044\014\042\015\034\016\012\017\020\020\026\021" +
    "\010\022\006\024\040\025\007\026\011\027\032\030\053" +
    "\031\045\032\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\024" +
    "\004\161\005\052\006\036\010\051\011\037\012\004\013" +
    "\044\014\042\015\034\016\012\017\020\020\026\021\010" +
    "\022\157\023\160\024\040\025\007\026\011\030\053\031" +
    "\045\032\033\001\001\000\002\001\001\000\060\002\152" +
    "\003\024\004\015\005\052\006\036\010\051\011\037\012" +
    "\004\013\044\014\042\015\034\016\012\017\020\020\026" +
    "\021\010\022\006\024\040\025\007\026\011\027\032\030" +
    "\053\031\045\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\056\006\036" +
    "\010\051\011\037\012\004\013\044\014\042\015\034\016" +
    "\012\017\020\020\026\021\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\055\010" +
    "\051\011\037\012\004\013\044\014\042\015\034\016\012" +
    "\017\020\020\026\021\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\061\010\051" +
    "\011\037\012\004\013\044\014\042\015\034\016\012\017" +
    "\020\020\026\021\010\001\001\000\002\001\001\000\026" +
    "\010\051\011\064\012\004\013\044\014\042\015\034\016" +
    "\012\017\020\020\026\021\010\001\001\000\032\005\075" +
    "\006\036\010\051\011\037\012\004\013\044\014\042\015" +
    "\034\016\012\017\020\020\026\021\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\070\006\036\010" +
    "\051\011\037\012\004\013\044\014\042\015\034\016\012" +
    "\017\020\020\026\021\010\001\001\000\004\027\073\001" +
    "\001\000\002\001\001\000\004\027\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\100\001\001\000" +
    "\002\001\001\000\004\027\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\051\012\004\014\102\015" +
    "\034\016\012\017\020\020\026\021\010\001\001\000\002" +
    "\001\001\000\020\010\051\012\004\015\104\016\012\017" +
    "\020\020\026\021\010\001\001\000\002\001\001\000\016" +
    "\010\051\012\004\016\106\017\020\020\026\021\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\051" +
    "\012\004\017\111\020\026\021\010\001\001\000\002\001" +
    "\001\000\012\010\051\012\004\020\132\021\010\001\001" +
    "\000\012\010\051\012\004\020\115\021\010\001\001\000" +
    "\012\010\051\012\004\020\130\021\010\001\001\000\002" +
    "\001\001\000\010\010\051\012\004\021\127\001\001\000" +
    "\010\010\051\012\004\021\120\001\001\000\002\001\001" +
    "\000\006\010\051\012\126\001\001\000\006\010\051\012" +
    "\125\001\001\000\006\010\051\012\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\051\012\004\020\133" +
    "\021\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\051\012\004\017\135\020\026\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\010\051\011\154\012\004\013" +
    "\044\014\042\015\034\016\012\017\020\020\026\021\010" +
    "\001\001\000\002\001\001\000\004\027\156\001\001\000" +
    "\002\001\001\000\056\003\024\004\161\005\052\006\036" +
    "\010\051\011\037\012\004\013\044\014\042\015\034\016" +
    "\012\017\020\020\026\021\010\022\157\023\164\024\040" +
    "\025\007\026\011\030\053\031\045\032\033\001\001\000" +
    "\002\001\001\000\056\003\024\004\161\005\052\006\036" +
    "\010\051\011\037\012\004\013\044\014\042\015\034\016" +
    "\012\017\020\020\026\021\010\022\157\023\162\024\040" +
    "\025\007\026\011\030\053\031\045\032\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\176\010\051\011\037\012\004\013\044\014" +
    "\042\015\034\016\012\017\020\020\026\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\010\051\011\202\012\004\013\044" +
    "\014\042\015\034\016\012\017\020\020\026\021\010\001" +
    "\001\000\002\001\001\000\004\027\204\001\001\000\002" +
    "\001\001\000\004\027\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(java_cup.runtime.Symbol currToken) {
        System.out.println("You're crazy, it's so easy: " + "Linha: " + (currToken.left+1) + " Coluna: " + (currToken.right+1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // unidade_de_compilacao ::= declaracao unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= unidade_de_compilacao EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unidade_de_compilacao ::= instrucao unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unidade_de_compilacao ::= instrucao_composta unidade_de_compilacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidade_de_compilacao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // especificador_tipo ::= INTEIRO_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // especificador_tipo ::= DECIMAL_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // especificador_tipo ::= CARACTER_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificador_tipo ::= BOOLEANO_RESERVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracao ::= especificador_tipo IDENTIFICADOR FECHA_COMANDO 
            {
              Object RESULT =null;
		 System.out.println("Variavel declarada\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracao ::= especificador_tipo IDENTIFICADOR ABRE_COLCHETE INTEIRO FECHA_COLCHETE FECHA_COMANDO 
            {
              Object RESULT =null;
		 System.out.println("Variavel declarada\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= expressao_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= expressao VIRGULA expressao_atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressao_atribuicao ::= expressao_condicional FECHA_COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressao_atribuicao ::= IDENTIFICADOR operador_atribuicao expressao_atribuicao 
            {
              Object RESULT =null;
		 System.out.println("Atribuicao feita a um identificador\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operador_atribuicao ::= ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constante ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constante ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constante ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constante ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressao_condicional ::= expressao_ou 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressao_ou ::= expressao_e 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao_ou ::= expressao_ou OU expressao_e 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica OU encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao_e ::= expressao_ou_exclusivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_e",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao_e ::= expressao_e E expressao_ou_exclusivo 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica E encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_e",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao_ou_exclusivo ::= expressao_equalidade 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou_exclusivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao_ou_exclusivo ::= expressao_ou_exclusivo OU_EXCLUSIVO expressao_equalidade 
            {
              Object RESULT =null;
		 System.out.println("Expressao logica OU_EXCLUSIVO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_ou_exclusivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao_equalidade ::= expressao_relacional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao_equalidade ::= expressao_equalidade EQUIVALENCIA expressao_relacional 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '==' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao_equalidade ::= expressao_equalidade NEGACAO ATRIBUICAO expressao_relacional 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '!=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao_relacional ::= expressao_aditiva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao_relacional ::= expressao_relacional MENOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '<' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao_relacional ::= expressao_relacional MAIOR_QUE expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '>' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao_relacional ::= expressao_relacional MENOR_QUE ATRIBUICAO expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '<=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressao_relacional ::= expressao_relacional MAIOR_QUE ATRIBUICAO expressao_aditiva 
            {
              Object RESULT =null;
		 System.out.println("Expressao relacional '>=' encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressao_aditiva ::= expressao_multiplicativa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressao_aditiva ::= expressao_aditiva MAIS expressao_multiplicativa 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de ADICAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressao_aditiva ::= expressao_aditiva MENOS expressao_multiplicativa 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de SUBTRACAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressao_multiplicativa ::= expressao_primaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressao_multiplicativa ::= expressao_multiplicativa MULTIPLICACAO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de MULTIPLICACAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressao_multiplicativa ::= expressao_multiplicativa DIVISAO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de  DIVISAO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao_multiplicativa ::= expressao_multiplicativa RESTO expressao_primaria 
            {
              Object RESULT =null;
		 System.out.println("Expressao aritmetica de RESTO encontrada \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao_primaria ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao_primaria ::= constante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instrucao_composta ::= ABRE_BLOCO bloco_instrucao FECHA_BLOCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_composta",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloco_instrucao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloco_instrucao ::= declaracao bloco_instrucao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloco_instrucao ::= instrucao bloco_instrucao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instrucao ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instrucao ::= instrucao_se 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instrucao ::= instrucao_iterativa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instrucao ::= instrucao_pulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instrucao ::= comando 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instrucao_se ::= SE ABRE_PARENTESES expressao_condicional FECHA_PARENTESES instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim da Instrucao SE\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_se",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instrucao_se ::= SE ABRE_PARENTESES expressao_condicional FECHA_PARENTESES instrucao_composta SE_NAO instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim da Instrucao SE SE_NAO\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_se",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instrucao_iterativa ::= ENQUANTO ABRE_PARENTESES expressao_condicional FECHA_PARENTESES instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando ENQUANTO\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instrucao_iterativa ::= PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO expressao FECHA_PARENTESES instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instrucao_iterativa ::= PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO expressao_condicional FECHA_COMANDO FECHA_PARENTESES instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instrucao_iterativa ::= PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO expressao FECHA_PARENTESES instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instrucao_iterativa ::= PARA ABRE_PARENTESES expressao_atribuicao FECHA_COMANDO FECHA_COMANDO FECHA_PARENTESES instrucao_composta 
            {
              Object RESULT =null;
		 System.out.println("Fim do Comando PARA \n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instrucao_pulo ::= CONTINUAR FECHA_COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instrucao_pulo ::= PARAR FECHA_COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instrucao_pulo ::= RETORNAR expressao FECHA_COMANDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comando ::= comando_escreva 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comando ::= comando_guarda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comando_escreva ::= ESCREVA ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES FECHA_COMANDO 
            {
              Object RESULT =null;
		 System.out.println("Comando ESCREVA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_escreva",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comando_escreva ::= ESCREVA ABRE_PARENTESES STRING FECHA_PARENTESES FECHA_COMANDO 
            {
              Object RESULT =null;
		 System.out.println("Comando ESCREVA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_escreva",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comando_guarda ::= GUARDA ABRE_PARENTESES IDENTIFICADOR FECHA_PARENTESES FECHA_COMANDO 
            {
              Object RESULT =null;
		 System.out.println("Comando GUARDA encontrado\n "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_guarda",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
